// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enable SQLite JSON1 extension
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          String    @default("MEMBER") // ADMIN, MANAGER, MEMBER
  emailVerified DateTime?
  image         String?
  settings      String?   @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  organizations Organization[]
  projects Project[]
  tasks    Task[]
  notes    Note[]
  habits   Habit[]
  habitEntries HabitEntry[]
  pomodoroSessions PomodoroSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]
}

model Project {
  id             String    @id @default(cuid())
  name           String
  description    String?
  status         String    @default("ACTIVE")
  color          String?
  dueDate        DateTime?
  website        String?
  categories     String?   @default("[]") // JSON array of strings
  documents      String?   @default("[]") // JSON array of strings
  userId         String
  organizationId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  tasks        Task[]
  notes        Note[]
  columns      KanbanColumn[]
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      String      @default("ACTIVE")
  priority    String      @default("P1")
  severity    String      @default("S1")
  dueDate     DateTime?
  projectId   String?
  userId      String
  parentId    String?
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Task?       @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks    Task[]      @relation("TaskHierarchy")
  columnId    String?
  column      KanbanColumn? @relation(fields: [columnId], references: [id], onDelete: SetNull)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([projectId])
  @@index([columnId])
  @@index([userId])
  @@index([parentId])
}

model KanbanColumn {
  id          String      @id @default(cuid())
  name        String
  color       String
  order       Int
  projectId   String?
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([projectId])
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String
  projectId String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

model Habit {
  id          String   @id @default(cuid())
  name        String
  description String?
  frequency   String   @default("DAILY") // DAILY, WEEKLY, MONTHLY
  target      Int      @default(1)
  color       String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries HabitEntry[]
}

model HabitEntry {
  id        String   @id @default(cuid())
  habitId   String
  date      DateTime @default(now())
  completed Boolean  @default(true)
  value     Int      @default(1)
  userId    String
  createdAt DateTime @default(now())

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([habitId, date, userId])
}

model PomodoroSession {
  id        String   @id @default(cuid())
  duration  Int      @default(25) // in minutes
  type      String   @default("FOCUS") // FOCUS, SHORT_BREAK, LONG_BREAK
  completed Boolean  @default(false)
  startTime DateTime?
  endTime   DateTime?
  taskId    String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 